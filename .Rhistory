library(dng)
mu1 = c(1,2,3,4)
df1 = c(1,1,1,2)
dsplit(mu1,df1,df1,df1,df1,T)
mu1 = c(1,2,3,4)
df1 = c(1,1,1,2)
dsplitt(mu1,df1,df1,df1,df1,T)
library(dng)
mu1 = c(1,2,3,4)
df1 = c(1,1,1,2)
dsplitt(mu1,df1,df1,df1,df1,T)
psplitt(mu1,df1,df1,df1,df1)
library(dng)
psplitt(mu1,df1,df1,df1,df1)
library(dng)
library(dng)
library(dng)
dsplitt(1,2,1,1,2,1)
dsplitt(1,2,1,1,2,F)
qsplitt(1,2,1,1,T)
qsplitt(1,2,1,1,F)
splitt.mean <- function(mu, df, phi, lmd)
{
h <- 2*sqrt(df)*phi*(lmd-1)/((df-1)*beta(df/2, 1/2))
mean <- mu + h
return(mean)
}
cppFunction('
NumericVector splitt.mean_cpp(NumericVector mu, NumericVector df, NumericVector phi, NumericVector lmd)
{
int h,mu;
int beta0;
beta0=R::beta(df*0.5,0.5);
h=2*pow(df,2)*phi*(lmd-1)/((df-1)*beta0);
mean=mu+h;
return mean;
}
')
splitt.mean <- function(mu, df, phi, lmd)
{
h <- 2*sqrt(df)*phi*(lmd-1)/((df-1)*beta(df/2, 1/2))
mean <- mu + h
return(mean)
}
splitt.mean(1,2,3,4)
splitt_mean(1,2,3,4)
mu0=rnorm(100,1,1)
df0=rnorm(100,2,1)
phi0=rnorm(100,3,2)
lmd0=rnorm(100,1,2)
splitt_mean(mu0,df0,phi0,lmd0)
system.time(splitt_mean(mu0,df0,phi0,lmd0))
system.time(splitt.mean(mu0,df0,phi0,lmd0))
n=5000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
n=80000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
n=3000000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
n=100000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
n=5000000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt_mean(mu0,df0,phi0,lmd0))
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
system.time(splitt.mean(mu0,df0,phi0,lmd0))
n=10
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
splitt_mean(mu0,df0,phi0,lmd0)
splitt.mean(mu0,df0,phi0,lmd0)
200000
n=200000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
n=1000000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt_mean(mu0,df0,phi0,lmd0))
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
n=5000000
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
n=10000000
0.07
mu0=rnorm(n,1,1)
df0=rnorm(n,2,1)
phi0=rnorm(n,3,2)
lmd0=rnorm(n,1,2)
system.time(splitt.mean(mu0,df0,phi0,lmd0))
system.time(splitt_mean(mu0,df0,phi0,lmd0))
splitt.var <- function(df, phi, lmd)
{
h <- 2*sqrt(df)*phi*(lmd-1)/((df-1)*beta(df/2, 1/2))
var <- (1+lmd^3)/(1+lmd)*df/(df-2)*phi^2-h^2
return(var)
}
splitt.var(df0,phi0,lmd0)
system.time(splitt.var(df0,phi0,lmd0))
system.time(splitt_var(df0,phi0,lmd0))
n
splitt.skewness <- function(df, phi, lmd)
{
h <- 2*sqrt(df)*phi*(lmd-1)/((df-1)*beta(df/2, 1/2))
var <- (1+lmd^3)/(1+lmd)*df/(df-2)*phi^2-h^2
m3 <- (2*h^3+2*h*phi^2*(lmd^2+1)*df/(df-3)
- 3*h*phi^2*(lmd^3+1)/(lmd+1)*df/(df-2))
skewness <- m3/var^(3/2)
return(skewness)
}
n1=10
mu1=rnorm(n1,1,1)
df1=rnorm(n1,2,1)
phi1=rnorm(n1,3,2)
lmd1=rnorm(n1,1,2)
splitt.var(df1,phi1,lmd1)
splitt_var(df1,phi1,lmd1)
splitt.skewness(df1,phi1,lmd1)
splitt_skewness(df1,phi1,lmd1)
system.time(splitt.skewness(df0,phi0,lmd0))
system.time(splitt_skewness(df0,phi0,lmd0))
dsplitt <- function(x, mu, df, phi, lmd, log)
{
I0 <- (x <= mu) # Logical values. 1, if y <= mu; 0, if y >mu.
I <- (!I0)  # Logical values. 1, if y > mu; 0, if y <= mu.
sign <- 1*I0 + lmd*I # sign = 1 if y<=mu; sign = lmd.^2 if y>2
density.log <- (log(2)+ (1+df)/2*(log(df)-log(df+(-mu+x)^2/(phi^2*sign^2)))-
log(phi)-log(df)/2-lbeta(df/2,1/2)-log(1+lmd))
if(log == TRUE)
{
out <- density.log
}
else
{
out <- exp(density.log)
}
return(out)
}
x0=rnorm(n,0,3)
x1=rnorm(n1,0,3)
dsplitt(x1,1,2,3,4,1)
dsplitt
dng::dsplitt(x1,1,2,3,4,1)
dsplitt(x1,1,2,3,4,1)
library(dng)
qsplitt_r <- function(p, mu, df, phi, lmd)
{
n <- length(p)
mu.long <- p
mu.long[] <- mu
df.long <- p
df.long[] <- df
phi.long <- p
phi.long[] <- phi
lmd.long <- p
lmd.long[] <- lmd
I0 <- (p<=(1/(1+lmd.long)))
I <- (!I0)
out <- p
out[] <- NA
if(any(I0))
{
p0 <- p[I0]
mu0 <- mu.long[I0]
lmd0 <- lmd.long[I0]
df0 <- df.long[I0]
phi0 <- phi.long[I0]
p0std <- p0*(1+lmd0)/2
y0std <- qt(p0std, df = df0)
out0 <- y0std*phi0+mu0
out[I0] <- out0
}
if(any(I))
{
p1 <- p[I]
mu1 <- mu.long[I]
lmd1 <- lmd.long[I]
df1 <- df.long[I]
phi1 <- phi.long[I]
p1std <- (p1-1/(1+lmd1))*(1+lmd1)/(2*lmd1)+1/2
y1std <- qt(p1std, df = df1)
out1 <- y1std*(phi1*lmd1)+mu1
out[I] <- out1
}
return(out)
}
rsplitt <- function(n, mu, df, phi, lmd)
{
## Inverse method
u <- runif(n)
out <- qsplitt(p = u, mu = mu, df = df, phi = phi, lmd = lmd)
return(out)
}
library(dng)
